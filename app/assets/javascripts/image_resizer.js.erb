/**
Javascript helper for building `image-resizer` url endpoints
 - this file is partially built via the parent ruby process to include the
   available modifiers and custom class/method names.
*/
(function(root, factory) {
  'use strict';

  // AMD: import Backbone and underscore into the factory
  if (typeof define === 'function' && define.amd) {
    define([], function(){
      return factory(root);
    });

  // CommonJS: for Node.js or Browserify
  } else if (typeof exports !== 'undefined') {
    module.exports = factory(root);

  // Finally, as a browser global.
  } else {
    root.<%= Image::Resizer::Rails.js_class_name %> = factory(root);
  }

}(this, function(root){
  'use strict';

  function parseArgs(){
    var source, modifiers;
    source = typeof arguments[0] === 'string' ? arguments[0] : null;
    if (source){
      modifiers = arguments[1];
    } else {
      modifiers = arguments[0];
    }
    return { source: source, modifiers: modifiers };
  };

  function generateEndpoint(source, modifiers){
    var uri, cdn, mods, path;

    uri = source || URI(source);
    cdn = IR.CDN.replace(/\/$/, '');
    mods = modStr(uri, modifiers);
    path = buildPath(uri, modifiers);

    return cdn + mods + path;
  };

  function modSet(key){
    var k, v;
    for (k in IR.modifiers){
      v = IR.modifiers[k];
      if (k === key || v.alias === key){
        return v;
      }
    }
    return null;
  };

  function sourceOption(key){
    for (var k in IR.modifiers.e.values)){
      if (k === key){
        return [k, IR.modifiers.e.values[k]];
      }
    }
    return null;
  };

  function modStr(uri, modifiers){
    var modArr = [];
    if (modifiers){
      modArr = buildModArr(modifiers);
    }
    if (uri && urlDomain(uri.hostname) === 'facebook'){
      modArr.push('efacebook');
    }
    return modArr.length > 0 ? '/' + modArr.join('-') : '';
  };

  function buildModArr(modifiers){
    var modArr, k, v, mSet, src;

    modArr = [];
    for (k in IR.modifiers){
      v = IR.modifiers[k];
      mSet = modSet(k);
      src = sourceOption(k);
      if (mSet){
        if (mSet.values){
          if mSet.values[v]){
            modArr.push(k + v);
          }
        } else {
          modArr.push(k + v);
        }
      } else if (src) {
        modArr.push('e' + src[0]);
      }
    }

    return modArr;
  };

  function buildPath(uri, modifiers){

  };

  function urlDomain(host){
    var domain = 'other';
    if (/s3.amazonaws.com/i.test(host)){
      domain = 's3';
    }
    if (/facebook.com/i.test(host)){
      domain = 'facebook';
    }
    return domain;
  };

  function s3Object(uri){
    if (url.hostname === 's3.amazonaws.com'){
      return '/' + uri.pathname.split('/').slice(2).join('/');
    } else {
      return uri.pathname;
    }
  };

  function URI(url){
    var parser = document.createElement('a');
    parser.href = url;
    return parser;
  }

  function IR(){}

  IR.irImageTag = function(){
    var args = parseArgs.apply(this, arguments);
    console.log(args);
  };

  IR.irBackground = function(){
    var args, url;

    args = parseArgs.apply(this, arguments);
    url = generateEndpoint(args.source, args.modifiers);

    return 'background-image:url(' + url + ')';
  };

  IR.irUrl = function(){
    var args = parseArgs.apply(this, arguments);
    return generateEndpoint(args.source, args.modifiers);
  };

  <% unless Image::Resizer::Rails.js_helper_name.nil? %>
  IR.<%= Image::Resizer::Rails.js_helper_name %> = IR.irImageTag;
  <% end %>

  IR.modifiers = <%= Image::Resizer::Rails.modifiers.to_json %>;

  IR.CDN = <%= Image::Resizer::Rails.cdn.to_json %>;

  IR.VERSION = <%= Image::Resizer::Rails::VERSION.to_json %>;

  return IR;
}));
